generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Models
model Manager {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstName String   @map("first_name") @db.VarChar(100)
  lastName  String   @map("last_name") @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  company   String   @db.VarChar(255)
  role      String   @db.VarChar(50)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("managers")
}

model Employee {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstName String   @map("first_name") @db.VarChar(100)
  lastName  String   @map("last_name") @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  company   String   @db.VarChar(255)
  role      String   @db.VarChar(50)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("employees")
}

model PolicyCategory {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  policies    Policy[]
  
  @@map("policy_categories")
}

model Policy {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title        String    @db.VarChar(255)
  categoryId   String    @map("category_id") @db.Uuid
  version      Int       @default(1)
  content      String    @db.Text
  summary      String?   @db.Text
  effectiveDate DateTime @map("effective_date") @db.Date
  expiryDate   DateTime? @map("expiry_date") @db.Date
  status       PolicyStatus @default(ACTIVE)
  createdBy    String?   @map("created_by") @db.VarChar(100)
  approvedBy   String?   @map("approved_by") @db.VarChar(100)
  approvalDate DateTime? @map("approval_date")
  sourceFile   String?   @map("source_file") @db.VarChar(255)
  metadata     Json      @default("{}")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relations
  category     PolicyCategory @relation(fields: [categoryId], references: [id])
  chunks       PolicyChunk[]
  access       PolicyAccess[]
  changes      PolicyChange[]
  
  @@unique([title, version])
  @@map("policies")
}

model PolicyChunk {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  policyId   String   @map("policy_id") @db.Uuid
  chunkIndex Int      @map("chunk_index")
  content    String   @db.Text
  startIndex Int      @map("start_index")
  endIndex   Int      @map("end_index")
  // Note: Prisma doesn't support vector type yet, we'll handle this separately
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  policy     Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@unique([policyId, chunkIndex])
  @@map("policy_chunks")
}

model PolicyAccess {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  policyId    String      @map("policy_id") @db.Uuid
  role        String      @db.VarChar(50)
  accessLevel AccessLevel @default(READ) @map("access_level")
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Relations
  policy      Policy      @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@unique([policyId, role])
  @@map("policy_access")
}

model PolicyChange {
  id              String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  policyId        String     @map("policy_id") @db.Uuid
  changeType      ChangeType @map("change_type")
  previousVersion Int?       @map("previous_version")
  newVersion      Int?       @map("new_version")
  changeSummary   String?    @map("change_summary") @db.Text
  changedBy       String?    @map("changed_by") @db.VarChar(100)
  changeReason    String?    @map("change_reason") @db.Text
  changedAt       DateTime   @default(now()) @map("changed_at")
  
  // Relations
  policy          Policy     @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@map("policy_changes")
}

// Enums
enum PolicyStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DEPRECATED
  
  @@map("policy_status")
}

enum AccessLevel {
  READ
  WRITE
  ADMIN
  
  @@map("access_level")
}

enum ChangeType {
  CREATED
  UPDATED
  APPROVED
  ARCHIVED
  
  @@map("change_type")
}

// Conversation Management
model ConversationSession {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  userType  String   @map("user_type") @db.VarChar(20) // "manager" or "employee"
  title     String?  @db.VarChar(255)
  messages  Json     @default("[]") // Stores ConversationMessage[] as JSON
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("conversation_sessions")
  @@index([userId, userType])
  @@index([createdAt])
}

